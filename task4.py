"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
"""
from timeit import timeit
from random import randint

array = [randint(0, 20) for i in range(100)]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    num = max(array, key=array.count)
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {array.count(num)} раз(а)'

print(timeit("func_1()", setup="from __main__ import func_1", number=100000))
print(timeit("func_2()", setup="from __main__ import func_2", number=100000))
print(timeit("func_3()", setup="from __main__ import func_3", number=100000))

# Ну вывод, что вторая функция работает дольше всех, опущу =)
# Для себя из этого задания сделал другой вывод, что надо подтягивать общие знания
# по Питону, потому что тут намаялся не с таймитом и сПрофайлом, а с оптимизацией кода.
# Не было бы разбора - не затянул бы.
# Подскажите пожалуйста, как можно себя поразвивать в этом вопросе, если заняться
# целенаправленно улучшением в этом направлении? Потому что каждый раз пытался
# придумать лучшее решение, и ничего в голову не лезло, а как залезу в разбор, вроде оказывается,
# что и синтаксис знакомый.